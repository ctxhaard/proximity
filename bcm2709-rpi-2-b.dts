/dts-v1/;

#include "bcm2709.dtsi"

#define ROBOTTINO

#ifdef ROBOTTINO
#	define PIN_LEFT_ENABLE         23 // Raspi pos. 16
#	define PIN_RIGHT_ENABLE        22 // Raspi pos. 15

#	define PIN_LEFT_DIRECTION      25 // Raspi pos. 22
#	define PIN_RIGHT_DIRECTION     24 // Raspi pos. 18

#	define PIN_LEFT_POWER          13 // Raspi pos. 33
#	define PIN_RIGHT_POWER         12 // Raspi pos. 32

#	define PIN_FRONT_LEFT_TRIGGER  17 // Raspi pos. 11
#	define PIN_FRONT_LEFT_ECHO     27 // Raspi pos. 13

#	define PIN_FRONT_RIGHT_TRIGGER 10 // Raspi pos. 19 
#	define PIN_FRONT_RIGHT_ECHO    9  // Raspi pos. 21

#	define PIN_REAR_TRIGGER        3  // Raspi pos. 5
#	define PIN_REAR_ECHO           4  // Raspi pos. 3
#endif // ROBOTTINO

/ {
	compatible = "brcm,bcm2709";
#ifdef ROBOTTINO
	model = "Rpi 2 Robottino";
#else
	model = "Raspberry Pi 2 Model B";
#endif // BOBOTTINO
};

&gpio {
	sdhost_pins: sdhost_pins {
		brcm,pins = <48 49 50 51 52 53>;
		brcm,function = <4>; /* alt0 */
	};

	spi0_pins: spi0_pins {
		brcm,pins = <9 10 11>;
		brcm,function = <4>; /* alt0 */
	};

	spi0_cs_pins: spi0_cs_pins {
		brcm,pins = <8 7>;
		brcm,function = <1>; /* output */
	};

	i2c0_pins: i2c0 {
		brcm,pins = <0 1>;
		brcm,function = <4>;
	};

	i2c1_pins: i2c1 {
		brcm,pins = <2 3>;
		brcm,function = <4>;
	};

	i2s_pins: i2s {
		brcm,pins = <18 19 20 21>;
		brcm,function = <4>; /* alt0 */
	};

	audio_pins: audio_pins {
		brcm,pins = <40 45>;
		brcm,function = <4>;
	};
#ifdef ROBOTTINO	
	motor_controller_pins: motor_controller {
		// BCM2835_FSEL_ALT0 = 4
		brcm,pins =    <PIN_LEFT_ENABLE PIN_RIGHT_ENABLE
				PIN_LEFT_DIRECTION PIN_RIGHT_DIRECTION
				PIN_LEFT_POWER PIN_RIGHT_POWER>;
		brcm,function = <1 1    // out
				 1 1    // out
				 4 4 >; // alt0 (PWM)
		brcm,pull =     <0 0    // none
				 0 0
				 0 0>;
	};
	
	hcsr04_front_left_pins: hcsr040 {
		brcm,pins =    <PIN_FRONT_LEFT_TRIGGER PIN_FRONT_LEFT_ECHO>;
		brcm,function = <1 0>;    // out,  in
		brcm,pull =     <0 0>;      // none
	};
       
	hcsr04_front_right_pins: hcsr041 {
		brcm,pins =    <PIN_FRONT_RIGHT_TRIGGER PIN_FRONT_RIGHT_ECHO>;
		brcm,function = <1 0>;    // out,  in
		brcm,pull =     <0 0>;      // none
	};
       
	hcsr04_rear_pins: hcsr042 {
		brcm,pins =    <PIN_REAR_TRIGGER PIN_REAR_ECHO>;
		brcm,function = <1 0>;    // out,  in
		brcm,pull =     <0 0>;      // none
       };
#endif // ROBOTTINO
};

&sdhost {
	pinctrl-names = "default";
	pinctrl-0 = <&sdhost_pins>;
	bus-width = <4>;
	status = "okay";
};

#ifdef ROBOTTINO
&soc {
	hcsr04@0 {
		compatible = "hcsr04";
		pinctrl-names = "default";
		pinctrl-0 = <&hcsr04_front_left_pins>;
		// see Documentation/gpio/board.txt
		proximity-gpios = <&gpio PIN_FRONT_LEFT_TRIGGER 0>,
				  <&gpio PIN_FRONT_LEFT_ECHO 0>;
		status="okay";
	};

	hcsr04@1 {
		compatible = "hcsr04";
		pinctrl-names = "default";
		pinctrl-0 = <&hcsr04_front_right_pins>;
		// see Documentation/gpio/board.txt
		proximity-gpios = <&gpio PIN_FRONT_RIGHT_TRIGGER 0>,
				  <&gpio PIN_FRONT_RIGHT_ECHO 0>;
		status="okay";
	};

	hcsr04@2 {
		compatible = "hcsr04";
		pinctrl-names = "default";
		pinctrl-0 = <&hcsr04_rear_pins>;
		// see Documentation/gpio/board.txt
		proximity-gpios = <&gpio PIN_REAR_TRIGGER 0>,
				  <&gpio PIN_REAR_ECHO 0>;
		status="okay";
	};
	
	// Pololu Dual MC33926 Motor Driver
	dual-mc33926 {
		compatibile = "dual-mc33926";
		pinctrl-names = "default";
		pinctrl-0 = <&motor_controller_pins>;
		// see Documentation/gpio/board.txt
		motor-controller-gpios = <&gpio PIN_LEFT_ENABLE 0>,
					 <&gpio PIN_RIGHT_ENABLE 0>,
					 <&gpio PIN_LEFT_DIRECTION 0>,
					 <&gpio PIN_RIGHT_DIRECTION 0>,
					 <&gpio PIN_LEFT_POWER 0>,
					 <&gpio PIN_RIGHT_POWER 0>;
	};
};
#endif // ROBOTTINO

&fb {
	status = "okay";
};

&uart0 {
	status = "okay";
};

&spi0 {
	pinctrl-names = "default";
	pinctrl-0 = <&spi0_pins &spi0_cs_pins>;
	cs-gpios = <&gpio 8 1>, <&gpio 7 1>;

	spidev0: spidev@0{
		compatible = "spidev";
		reg = <0>;	/* CE0 */
		#address-cells = <1>;
		#size-cells = <0>;
		spi-max-frequency = <500000>;
	};

	spidev1: spidev@1{
		compatible = "spidev";
		reg = <1>;	/* CE1 */
		#address-cells = <1>;
		#size-cells = <0>;
		spi-max-frequency = <500000>;
	};
};

&i2c0 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;
	clock-frequency = <100000>;
};

&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;
	clock-frequency = <100000>;
};

&i2c2 {
	clock-frequency = <100000>;
};

&i2s {
	pinctrl-names = "default";
	pinctrl-0 = <&i2s_pins>;
};

&leds {
	act_led: act {
		label = "led0";
		linux,default-trigger = "mmc0";
		gpios = <&gpio 47 0>;
	};

	pwr_led: pwr {
		label = "led1";
		linux,default-trigger = "input";
		gpios = <&gpio 35 0>;
	};
};

&hdmi {
	hpd-gpios = <&gpio 46 GPIO_ACTIVE_LOW>;
};

&audio {
	pinctrl-names = "default";
	pinctrl-0 = <&audio_pins>;
};

/ {
	__overrides__ {
		uart0 = <&uart0>,"status";
		uart1 = <&uart1>,"status";
		i2s = <&i2s>,"status";
		spi = <&spi0>,"status";
		i2c0 = <&i2c0>,"status";
		i2c1 = <&i2c1>,"status";
		i2c2_iknowwhatimdoing = <&i2c2>,"status";
		i2c0_baudrate = <&i2c0>,"clock-frequency:0";
		i2c1_baudrate = <&i2c1>,"clock-frequency:0";
		i2c2_baudrate = <&i2c2>,"clock-frequency:0";

		act_led_gpio = <&act_led>,"gpios:4";
		act_led_activelow = <&act_led>,"gpios:8";
		act_led_trigger = <&act_led>,"linux,default-trigger";

		pwr_led_gpio = <&pwr_led>,"gpios:4";
		pwr_led_activelow = <&pwr_led>,"gpios:8";
		pwr_led_trigger = <&pwr_led>,"linux,default-trigger";

		audio = <&audio>,"status";
		watchdog = <&watchdog>,"status";
		random = <&random>,"status";
		sd_overclock = <&sdhost>,"brcm,overclock-50:0";
		sd_force_pio = <&sdhost>,"brcm,force-pio?";
		sd_pio_limit = <&sdhost>,"brcm,pio-limit:0";
		sd_debug     = <&sdhost>,"brcm,debug";
	};
};
